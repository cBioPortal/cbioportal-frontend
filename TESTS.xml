<?xml version="1.0"?>
<testsuite name="PhantomJS 2.1.1 (Mac OS X 0.0.0)" package="" timestamp="2018-03-14T21:23:45" id="0" hostname="ersins-mbp.dfci.harvard.edu" tests="520" errors="0" failures="1" time="4.131">
  <properties>
    <property name="browser.fullName" value="Mozilla/5.0 (Macintosh; Intel Mac OS X) AppleWebKit/538.1 (KHTML, like Gecko) PhantomJS/2.1.1 Safari/538.1"/>
  </properties>
  <testcase name="&lt;App /> has a Router component" time="0.007" classname="&lt;App />"/>
  <testcase name="&lt;App /> passes a history prop" time="0.001" classname="&lt;App />"/>
  <testcase name="DatasetList what does it do?" time="0" classname="DatasetList"/>
  <testcase name="DatasetPage what does it do?" time="0" classname="DatasetPage"/>
  <testcase name="HomePage what does it do?" time="0" classname="HomePage"/>
  <testcase name="PageHeader what does it do?" time="0" classname="PageHeader"/>
  <testcase name="PatientViewPage handleSampleClick calls update route when no modifier keys are pressed" time="0.002" classname="PatientViewPage"/>
  <testcase name="PatientViewPage handleSampleClick does not call updateRoute or preventDefault if altKey is true" time="0" classname="PatientViewPage"/>
  <testcase name="PatientViewPage handleSampleClick does not call updateRoute or preventDefault if metaKey is true" time="0" classname="PatientViewPage"/>
  <testcase name="PatientViewPage handleSampleClick does not call updateRoute or preventDefault if shiftKey is true" time="0" classname="PatientViewPage"/>
  <testcase name="ClinicalInformationPatientTable what does it do?" time="0" classname="ClinicalInformationPatientTable"/>
  <testcase name="ClinicalInformationSamplesTable what does it do?" time="0" classname="ClinicalInformationSamplesTable"/>
  <testcase name="PatientViewPageStore if there are pdf items in response and their name starts with a given patientId, return collection, otherwise returns empty array" time="0.002" classname="PatientViewPageStore"/>
  <testcase name="PatientViewPageStore if there are pdf items in response and their name starts with the wrong patientId, return empty array" time="0" classname="PatientViewPageStore"/>
  <testcase name="PatientViewPageStore sets page title to patient if theres a patient id and sample if sample id, patient id winning out" time="0.008" classname="PatientViewPageStore"/>
  <testcase name="convertSamplesData api data is properly transformed into table data" time="0.003" classname="convertSamplesData"/>
  <testcase name="convertSamplesData what does it do?" time="0" classname="convertSamplesData"/>
  <testcase name="CopyNumberTableWrapper shows mrna expr column iff theres one sample and a molecular profile id" time="0.107" classname="CopyNumberTableWrapper"/>
  <testcase name="CopyNumberTableWrapper shows tumors column iff theres more than one sample" time="0.055" classname="CopyNumberTableWrapper"/>
  <testcase name="AnnotationColumnFormatter properly creates a civic entry" time="0.005" classname="AnnotationColumnFormatter"/>
  <testcase name="AnnotationColumnFormatter properly points that Civic has variants" time="0.001" classname="AnnotationColumnFormatter"/>
  <testcase name="AnnotationColumnFormatter properly points that Civic has no variants" time="0" classname="AnnotationColumnFormatter"/>
  <testcase name="CnaColumnFormatter CNA column renderer shows correct text based on alteration value" time="0.002" classname="CnaColumnFormatter"/>
  <testcase name="CohortColumnFormatter generates the tooltip text properly" time="0" classname="CohortColumnFormatter"/>
  <testcase name="CohortColumnFormatter calculates the sort value correctly" time="0.001" classname="CohortColumnFormatter"/>
  <testcase name="CohortColumnFormatter picks the correct gistic summary" time="0" classname="CohortColumnFormatter"/>
  <testcase name="GenomicOverview computing VAF plot frequencies computes the correct frequencies for a single sample" time="0.012" classname="GenomicOverview"/>
  <testcase name="GenomicOverview computing VAF plot frequencies computes the correct frequencies for multiple samples, such that &#xA;                the frequency lists are the same length, padded by NaNs for any &#xA;                mutation which that sample does not have" time="0.009" classname="GenomicOverview"/>
  <testcase name="tracksHelper what does it do?" time="0" classname="tracksHelper"/>
  <testcase name="PatientViewMutationTable hides mrna expr column if no expression profile is available, or theres more than one sample" time="0.053" classname="PatientViewMutationTable"/>
  <testcase name="PatientViewMutationTable shows mrna expr column if theres an expression profile and exactly one sample" time="0.038" classname="PatientViewMutationTable"/>
  <testcase name="PatientViewMutationTable hides copy number column if there's more than one sample" time="0.02" classname="PatientViewMutationTable"/>
  <testcase name="PatientViewMutationTable hides the tumors column if theres less than two samples" time="0.028" classname="PatientViewMutationTable"/>
  <testcase name="PatientViewMutationTable shows the tumors column if theres more than one sample" time="0.06" classname="PatientViewMutationTable"/>
  <testcase name="PatientViewMutationTable hides the copy number column if theres no discrete cna profile" time="0.019" classname="PatientViewMutationTable"/>
  <testcase name="AlleleFreqColumnFormatter uncalled mutations component w/o reads should have 0 opacity" time="0.001" classname="AlleleFreqColumnFormatter"/>
  <testcase name="AlleleFreqColumnFormatter uncalled mutations component w supporting reads should have >0 and &lt;1 opacity" time="0" classname="AlleleFreqColumnFormatter"/>
  <testcase name="AlleleFreqColumnFormatter called mutations component w supporting reads should have 1 opacity" time="0" classname="AlleleFreqColumnFormatter"/>
  <testcase name="AlleleFreqColumnFormatter sampleElement should have the text (uncalled)" time="0.001" classname="AlleleFreqColumnFormatter"/>
  <testcase name="AlleleFreqColumnFormatter calculates the Allele frequency for a mutation" time="0.001" classname="AlleleFreqColumnFormatter"/>
  <testcase name="TumorColumnFormatter test get present samples" time="0.001" classname="TumorColumnFormatter"/>
  <testcase name="TumorColumnFormatter test get sample ids" time="0" classname="TumorColumnFormatter"/>
  <testcase name="ClinicalAttributesInline what does it do?" time="0" classname="ClinicalAttributesInline"/>
  <testcase name="PatientHeader what does it do?" time="0" classname="PatientHeader"/>
  <testcase name="SampleInline renders the default component properly" time="0.001" classname="SampleInline"/>
  <testcase name="SampleInline renders the minimal component properly" time="0.001" classname="SampleInline"/>
  <testcase name="SampleInline renders the component with extra tooltip text properly" time="0.001" classname="SampleInline"/>
  <testcase name="SampleInline renders the component with additional content properly" time="0.002" classname="SampleInline"/>
  <testcase name="sampleManager what does it do?" time="0" classname="sampleManager"/>
  <testcase name="ThumbnailExpandVAFPlot what does it do?" time="0" classname="ThumbnailExpandVAFPlot"/>
  <testcase name="VAFPlot what does it do?" time="0" classname="VAFPlot"/>
  <testcase name="buildDefaultOQLProfile produces correct default queryies based on alteration profiles and zscore/rppa" time="0.001" classname="buildDefaultOQLProfile"/>
  <testcase name="extendSamplesWithCancerType when both CANCER_TYPE and CANCER_TYPE_DETAILED are present, should populated appropriately" time="0.002" classname="extendSamplesWithCancerType"/>
  <testcase name="extendSamplesWithCancerType when only CANCER_TYPE_DETAILED are present, cancerType should fall back to that of study" time="0" classname="extendSamplesWithCancerType"/>
  <testcase name="extendSamplesWithCancerType when CANCER_TYPE_DETAILED missing, cancerTypeDetailed should be CANCER_TYPE" time="0" classname="extendSamplesWithCancerType"/>
  <testcase name="ResultsViewPageStoreUtils computeCustomDriverAnnotationReport returns the right report for empty list" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils computeCustomDriverAnnotationReport returns the right report for no annotations, one element" time="0.001" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils computeCustomDriverAnnotationReport returns the right report for no annotations, three elements" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils computeCustomDriverAnnotationReport returns the right report for just binary annotations, one element" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils computeCustomDriverAnnotationReport returns the right report for just binary annotations, three elements" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils computeCustomDriverAnnotationReport returns the right report for just tiers annotations, one element" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils computeCustomDriverAnnotationReport returns the right report for just tiers annotations, three elements" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils computeCustomDriverAnnotationReport returns the right report for binary and tier annotation in one element" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils computeCustomDriverAnnotationReport returns the right report for binary and tier annotation, both present in three elements" time="0.001" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils computeCustomDriverAnnotationReport returns the right report for binary and tier annotation in different elements" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils computeCustomDriverAnnotationReport returns the right report for binary and tier annotation in different elements, including an element with no annotation" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils initializeCustomDriverAnnotationSettings initializes selection for empty list of tiers" time="0.001" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils initializeCustomDriverAnnotationSettings initializes selection for given tiers" time="0" classname="ResultsViewPageStoreUtils">
    <skipped/>
  </testcase>
  <testcase name="ResultsViewPageStoreUtils initializeCustomDriverAnnotationSettings sets hotspots and oncoKb if option is set and there are no custom annotations" time="0.001" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils initializeCustomDriverAnnotationSettings does not set hotspots and oncoKb if option is set and there are custom annotations" time="0" classname="ResultsViewPageStoreUtils">
    <skipped/>
  </testcase>
  <testcase name="ResultsViewPageStoreUtils initializeCustomDriverAnnotationSettings does not set hotspots and oncoKb if option is not set" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils annotateMutationPutativeDriver annotates with hotspot, oncokb" time="0.001" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils annotateMutationPutativeDriver annotates with cbioportal, cosmic" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils annotateMutationPutativeDriver annotates with custom driver annotations" time="0.001" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils annotateMutationPutativeDriver annotates with all" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils annotateMutationPutativeDriver annotates with none" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils computePutativeDriverAnnotatedMutations returns empty list for empty input" time="0.001" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils computePutativeDriverAnnotatedMutations annotates a single mutation" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils computePutativeDriverAnnotatedMutations annotates a few mutations" time="0.001" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils computePutativeDriverAnnotatedMutations excludes a single non-annotated mutation" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils computePutativeDriverAnnotatedMutations excludes non-annotated mutations from a list of a few" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils getOncoKbOncogenic should return Likely Oncogenic if thats the input" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils getOncoKbOncogenic should return Oncogenic if thats the input" time="0.001" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils getOncoKbOncogenic should return Predicted Oncogenic if thats the input" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils getOncoKbOncogenic should return empty string for any other case" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils annotateMolecularDatum annotates single element correctly in case of Likely Oncogenic" time="0.001" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils annotateMolecularDatum annotates single element correctly in case of Predicted Oncogenic" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils annotateMolecularDatum annotates single element correctly in case of Oncogenic" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils annotateMolecularDatum annotates single element correctly in case of Likely Neutral, Inconclusive, Unknown, asdfasd, undefined, empty" time="0.001" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils annotateMolecularDatum annotates non-copy number data with empty string" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils computeGenePanelInformation computes the correct object with no input data" time="0.001" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils computeGenePanelInformation computes the correct object with gene panel data" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils computeGenePanelInformation computes the correct object with whole exome sequenced data" time="0.001" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils computeGenePanelInformation computes the correct object with not sequenced data" time="0" classname="ResultsViewPageStoreUtils"/>
  <testcase name="ResultsViewPageStoreUtils computeGenePanelInformation computes the correct object with gene panel data and whole exome sequenced data and not sequenced data" time="0.001" classname="ResultsViewPageStoreUtils"/>
  <testcase name="SurvivalStoreHelper #getPatientSurvivals() returns empty list for empty clinical data" time="0.001" classname="SurvivalStoreHelper"/>
  <testcase name="SurvivalStoreHelper #getPatientSurvivals() returns correct result for example data" time="0.001" classname="SurvivalStoreHelper"/>
  <testcase name="CancerSummaryChart Allows chart container to be horizontally scrolled when bar threshold is reached" time="0.001" classname="CancerSummaryChart"/>
  <testcase name="CancerSummaryChart #legendData only includes alteration types which are present in query" time="0.007" classname="CancerSummaryChart"/>
  <testcase name="CancerSummaryChart #mergeAlterationDataAcrossAlterationTypes should merge alteration rate/count across alteration types" time="0.001" classname="CancerSummaryChart"/>
  <testcase name="CancerSummaryContainer #groupAlterationsBy defaults to studyId if there is only one study" time="0" classname="CancerSummaryContainer"/>
  <testcase name="CancerSummaryContainer #groupAlterationsBy respects user selected groupBy" time="0" classname="CancerSummaryContainer"/>
  <testcase name="CancerSummaryContainer #groupAlterationsBy when single study and single cancer type, defaults to cancerTypeDetailed" time="0.001" classname="CancerSummaryContainer"/>
  <testcase name="CancerSummaryContainer #groupAlterationsBy when single study and multipe cancer type, defaults to cancerType" time="0.001" classname="CancerSummaryContainer"/>
  <testcase name="CancerSummaryContent #getYValue should return total count if absolute mode, otherwise percentage" time="0.001" classname="CancerSummaryContent"/>
  <testcase name="CancerSummaryContent #calculatePercentage returns ratio of part to whole" time="0" classname="CancerSummaryContent"/>
  <testcase name="CancerSummaryContent #maxAltCount getter returns maxPercenage if we're in frequecy mode (default), absolute count otherwise" time="0.013" classname="CancerSummaryContent"/>
  <testcase name="CancerSummaryContent #handleYAxisChange should reset alteration slider to zero" time="0" classname="CancerSummaryContent"/>
  <testcase name="CancerSummaryContent #handleXAxisChange should reset alteration slider to zero" time="0" classname="CancerSummaryContent"/>
  <testcase name="CancerSummaryContent chartData getter returns labels and appropriate alteration percentages" time="0.005" classname="CancerSummaryContent"/>
  <testcase name="CancerSummaryContent chartData getter respects alteration percentage threshold" time="0.012" classname="CancerSummaryContent"/>
  <testcase name="CancerSummaryContent chartData getter respects alteration absolute threshold" time="0.072" classname="CancerSummaryContent"/>
  <testcase name="CancerSummaryContent chartData getter respects total sample threshold" time="0.092" classname="CancerSummaryContent"/>
  <testcase name="CancerSummaryContent chartData getter applies label transformer" time="0.013" classname="CancerSummaryContent"/>
  <testcase name="CancerSummaryContent determineSorterAndDirection sorting is default=desc and if x-axis, asc" time="0.001" classname="CancerSummaryContent"/>
  <testcase name="CancerSummaryContent determineSorterAndDirection if sorting by xAxis, sort just returns input key" time="0" classname="CancerSummaryContent"/>
  <testcase name="CancerSummaryContent determineSorterAndDirection if NOT sorting by xAxis, sorter return either absolute count or percentage value depending on yAxis value" time="0" classname="CancerSummaryContent"/>
  <testcase name="DownloadUtils generateOqlData generates empty oql data for a sample with no alteration data" time="0.003" classname="DownloadUtils"/>
  <testcase name="DownloadUtils generateOqlData generates oql data properly for samples with multiple alteration types" time="0.001" classname="DownloadUtils"/>
  <testcase name="DownloadUtils generateOqlData generates oql data properly for samples with multiple mutations/fusions" time="0.001" classname="DownloadUtils"/>
  <testcase name="DownloadUtils generateGeneAlterationData returns empty list in case of empty input" time="0.002" classname="DownloadUtils"/>
  <testcase name="DownloadUtils generateGeneAlterationData generates gene alteration data for multiple samples" time="0.012" classname="DownloadUtils"/>
  <testcase name="DownloadUtils generateMutationDownloadData generates download data for mutated samples" time="0.006" classname="DownloadUtils"/>
  <testcase name="DownloadUtils generateDownloadData generates download data for mRNA expression alterations" time="0.002" classname="DownloadUtils"/>
  <testcase name="DownloadUtils generateDownloadData generates download data for protein expression alterations" time="0.004" classname="DownloadUtils"/>
  <testcase name="DownloadUtils generateDownloadData generates download data for copy number altered samples" time="0.001" classname="DownloadUtils"/>
  <testcase name="DownloadUtils generateCaseAlterationData generates case alteration data for multiple samples" time="0.011" classname="DownloadUtils"/>
  <testcase name="MutationMapperDataStore initializes correctly" time="0.004" classname="MutationMapperDataStore"/>
  <testcase name="MutationMapperDataStore toggles selections correctly, selects mutations by position, and gives them in sorted order" time="0.013" classname="MutationMapperDataStore"/>
  <testcase name="MutationMapperDataStore implements isPositionSelected" time="0.003" classname="MutationMapperDataStore"/>
  <testcase name="#countMutations filters mutations for types missense and inframe and produces keyed table of position identifiers" time="0.003" classname="#countMutations"/>
  <testcase name="MutualExclusivityUtil #calculateAssociation() returns Co-occurrence if log odds ratio is positive" time="0" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #calculateAssociation() returns Mutual exclusivity if log odds ratio is 0" time="0" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #calculateAssociation() returns Mutual exclusivity if log odds ratio is negative" time="0" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #countOccurences() returns [1, 0, 0, 1] for [false, true] and [false, true]" time="0.002" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #countOccurences() returns [1, 1, 1, 1] for [false, true, false, true] and [false, true, true, false]" time="0.001" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #countOccurences() returns [2, 0, 0, 0] for [false, false] and [false, false]" time="0" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #calculatePValue() returns 0.3653846153846146 for 4, 3, 7, 2" time="0.003" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #calculatePValue() returns 0.07706146926536687 for 13, 7, 3, 7" time="0.02" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #calculateAdjustedPValue() returns 1 if bigger than 1" time="0.001" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #calculateAdjustedPValue() returns the value if smaller than 1" time="0" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #calculateLogOddsRatio() returns -0.9650808960435872 for 4, 3, 7, 2" time="0" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #calculateLogOddsRatio() returns 1.466337068793427 for 13, 7, 3, 7" time="0" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #calculateLogOddsRatio() returns Infinity for 5, 0 ,1, 0" time="0" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #getMutuallyExclusiveCounts() returns [&lt;span>&lt;b>no&lt;/b> gene pair&lt;/span>, null] for empty list" time="0.007" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #getMutuallyExclusiveCounts() returns [&lt;span>&lt;b>no&lt;/b> gene pair&lt;/span>, null] for 0 matched data" time="0.001" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #getMutuallyExclusiveCounts() returns [&lt;span>&lt;b>1&lt;/b> gene pair&lt;/span>, &lt;span> (none significant)&lt;/span>] for 1 matched 0 significant data" time="0.003" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #getMutuallyExclusiveCounts() returns [&lt;span>&lt;b>1&lt;/b> gene pair&lt;/span>, &lt;span> (&lt;b>1&lt;/b> significant)&lt;/span>] for 1 matched 1 significant data" time="0.003" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #getMutuallyExclusiveCounts() returns [&lt;span>&lt;b>2&lt;/b> gene pairs&lt;/span>, &lt;span> (&lt;b>2&lt;/b> significant)&lt;/span>] for 2 matched 2 significant data" time="0.002" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #getCountsText() returns correct text" time="0.005" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #getData() returns correct data" time="0.013" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #getFilteredData() returns the data correctly" time="0.002" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #formatPValue() returns &lt;0.001 for 0.0001" time="0" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #formatPValue() returns 0.001 for 0.001" time="0" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #formatPValue() returns 1.345 for 1.3454546" time="0" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #formatPValue() returns 0.050 for 0.05" time="0" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #formatPValueWithStyle() returns &lt;span>0.050&lt;/span> for 0.05" time="0.001" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #formatPValueWithStyle() returns &lt;b>&lt;span>0.042&lt;/span>&lt;/b> for 0.042" time="0.001" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #formatLogOddsRatio() returns &lt;-3 for -6.32" time="0.001" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #formatLogOddsRatio() returns -3.000 for -3" time="0" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #formatLogOddsRatio() returns 0.230 for 0.23" time="0" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #formatLogOddsRatio() returns 3.000 for 3" time="0.001" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil #formatLogOddsRatio() returns >3 for 4.32" time="0" classname="MutualExclusivityUtil"/>
  <testcase name="MutualExclusivityUtil &lt;MutualExclusivityTable/> returns rows correctly" time="0.048" classname="MutualExclusivityUtil">
    <failure type="">expected '&lt;td&gt;&lt;b&gt;&lt;span&gt;0.024&lt;/span&gt;&lt;/b&gt;&lt;/td&gt;' to equal '&lt;td&gt;&lt;b&gt;&lt;span&gt;0.023&lt;/span&gt;&lt;/b&gt;&lt;/td&gt;'
AssertionError@tests.webpack.js:36139:24
assert@tests.webpack.js:66412:31
equal@tests.webpack.js:68681:16
tests.webpack.js:137945:35
</failure>
  </testcase>
  <testcase name="SurvivalUtil #getEstimates() returns empty list for empty list" time="0.018" classname="SurvivalUtil"/>
  <testcase name="SurvivalUtil #getEstimates() returns correct estimates for the example data" time="0" classname="SurvivalUtil"/>
  <testcase name="SurvivalUtil #getMedian() returns NA for empty list" time="0.001" classname="SurvivalUtil"/>
  <testcase name="SurvivalUtil #getMedian() returns 182.19 for the example data" time="0" classname="SurvivalUtil"/>
  <testcase name="SurvivalUtil #getLineData() returns [{x: 0, y: 100}] for empty list" time="0.001" classname="SurvivalUtil"/>
  <testcase name="SurvivalUtil #getLineData() returns correct line data for the example data" time="0.008" classname="SurvivalUtil"/>
  <testcase name="SurvivalUtil #getScatterData() returns empty list for empty list" time="0.001" classname="SurvivalUtil"/>
  <testcase name="SurvivalUtil #getScatterData() returns correct scatter data for the example data" time="0.001" classname="SurvivalUtil"/>
  <testcase name="SurvivalUtil #getScatterDataWithOpacity() returns empty list for empty list" time="0.002" classname="SurvivalUtil"/>
  <testcase name="SurvivalUtil #getScatterDataWithOpacity() returns correct scatter data with opacity for the example data" time="0.001" classname="SurvivalUtil"/>
  <testcase name="SurvivalUtil #getStats() returns [0, 0, &quot;NA&quot;] for empty list" time="0.001" classname="SurvivalUtil"/>
  <testcase name="SurvivalUtil #getStats() returns correct stats for the example data" time="0" classname="SurvivalUtil"/>
  <testcase name="SurvivalUtil #calculateLogRank() returns NaN for empty list" time="0" classname="SurvivalUtil"/>
  <testcase name="SurvivalUtil #calculateLogRank() returns correct log rank for the example data" time="0" classname="SurvivalUtil"/>
  <testcase name="SurvivalUtil #getDownloadContent() returns correct download content for the example data" time="0.001" classname="SurvivalUtil"/>
  <testcase name="SurvivalUtil #convertScatterDataToDownloadData() returns empty list for empty list" time="0" classname="SurvivalUtil"/>
  <testcase name="SurvivalUtil #convertScatterDataToDownloadData() returns correct download data for the example data" time="0.001" classname="SurvivalUtil"/>
  <testcase name="url library transforms oncokb url configuration url to proxied url: removes protocol and trailing slash" time="0.001" classname="url library"/>
  <testcase name="url library transforms oncokb url configuration url to proxied url: removes protocol and trailing slash" time="0.001" classname="url library"/>
  <testcase name="MSKTabs initial render only mounts first tab" time="0.001" classname="MSKTabs"/>
  <testcase name="MSKTabs creates two tab buttons and toggles them properly" time="0.011" classname="MSKTabs"/>
  <testcase name="MSKTabs if unMountOnHide = false (or not set), switch tab causes mounting, switching again causes hide/show" time="0.006" classname="MSKTabs"/>
  <testcase name="MSKTabs if unMountOnHide = true, switch tab causes mounting, switching again causes hide/show" time="0.006" classname="MSKTabs"/>
  <testcase name="MSKTabs does not display tabs that have hide={true}" time="0.024" classname="MSKTabs"/>
  <testcase name="MSKTabs does not display the content of tabs that have loading={true}, instead showing a spinner; and does not show a tab with loading={true} unless it is the active tab" time="0.017" classname="MSKTabs"/>
  <testcase name="PageDecorator what does it do?" time="0" classname="PageDecorator"/>
  <testcase name="TruncatedText truncates the text properly with a suffix" time="0.001" classname="TruncatedText"/>
  <testcase name="TruncatedText properly adds tooltip" time="0.002" classname="TruncatedText"/>
  <testcase name="CancerHotspots what does it do?" time="0" classname="CancerHotspots"/>
  <testcase name="Civic with no data displays a load spinner when there is no civic data" time="0.036" classname="Civic with no data"/>
  <testcase name="Civic with data with variants displays the correct Civic icon" time="0.002" classname="Civic with data with variants"/>
  <testcase name="Civic with data with no variants displays the correct Civic icon" time="0.001" classname="Civic with data with no variants"/>
  <testcase name="Counts correctly Gives 1 point per entry" time="0.001" classname="Counts correctly"/>
  <testcase name="Counts correctly Gives 0 points if the entry is undefined" time="0" classname="Counts correctly"/>
  <testcase name="Counts correctly Gives 0 points if the entry is null" time="0" classname="Counts correctly"/>
  <testcase name="CivicCard should render civic-card" time="0.003" classname="CivicCard"/>
  <testcase name="CivicCard should not have variant" time="0.002" classname="CivicCard"/>
  <testcase name="CivicCard should have two variants" time="0.004" classname="CivicCard"/>
  <testcase name="MyCancerGenome component icon" time="0.001" classname="MyCancerGenome"/>
  <testcase name="MyCancerGenome tooltip content" time="0.001" classname="MyCancerGenome"/>
  <testcase name="OncoKB displays a load spinner when there is no indicator data" time="0.001" classname="OncoKB"/>
  <testcase name="OncoKB properly calculates OncoKB sort values" time="0.007" classname="OncoKB"/>
  <testcase name="FrequencyBar renders the components with correct dimensions" time="0" classname="FrequencyBar"/>
  <testcase name="FrequencyBar renders the components with correct fill color" time="0" classname="FrequencyBar"/>
  <testcase name="FrequencyBar renders the component with correct content" time="0.001" classname="FrequencyBar"/>
  <testcase name="ColumnVisibilityControls does not render list item if togglabe is false" time="0.006" classname="ColumnVisibilityControls"/>
  <testcase name="CopyDownloadControls downloads the complete data without any error messages" time="0.056" classname="CopyDownloadControls"/>
  <testcase name="CopyDownloadControls downloads the incomplete data, and shows a warning message" time="0.05" classname="CopyDownloadControls"/>
  <testcase name="CopyDownloadControls copies the complete data without any error messages" time="0.059" classname="CopyDownloadControls"/>
  <testcase name="CopyDownloadControls copies the incomplete data, and shows a warning message" time="0.054" classname="CopyDownloadControls"/>
  <testcase name="CosmicMutationTable what does it do?" time="0" classname="CosmicMutationTable"/>
  <testcase name="EnhancedReactTable what does it do?" time="0" classname="EnhancedReactTable"/>
  <testcase name="IColumnFormatter what does it do?" time="0" classname="IColumnFormatter"/>
  <testcase name="IEnhancedReactTableProps what does it do?" time="0" classname="IEnhancedReactTableProps"/>
  <testcase name="FadeInteraction showByDefault prop sets initialShow state properly" time="0.002" classname="FadeInteraction"/>
  <testcase name="FadeInteraction #onMouseEnter adjusts state properly" time="0" classname="FadeInteraction"/>
  <testcase name="FadeInteraction #onMouseLeave adjust state properly" time="0.001" classname="FadeInteraction"/>
  <testcase name="FadeInteraction componentWillUpdate updates show property" time="0.001" classname="FadeInteraction"/>
  <testcase name="LazyMobXTable utils maxPage gives the correct outputs in various cases" time="0" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable lazyMobXTableSort does not sort in place" time="0.002" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable lazyMobXTableSort sorts number|null values properly" time="0.001" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable lazyMobXTableSort sorts (number|null)[] values properly" time="0" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable lazyMobXTableSort sorts string|null values properly" time="0.001" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable lazyMobXTableSort sorts (string|null)[] values properly" time="0" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable lazyMobXTableSort sorts empty list properly" time="0" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable lazyMobXTableSort sorts singleton list properly" time="0.001" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable lazyMobXTableSort is a stable sort" time="0.002" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable headers shows headers for all the given visible columns, including the cases of one and zero columns" time="0.066" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable headers adds the text-align property for a column header according to the specification" time="0.016" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable headers has a tooltip element for columns with tooltips, and no tooltips for columns without tooltips" time="0.036" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable headers initially has no header with sort classes if no initial sort column specified" time="0.014" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable headers sets initial sort class correctly, and sets and toggles class correctly when clicking on columns" time="0.091" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable headers does nothing on click of a header of an unsortable column" time="0.017" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable headers goes back to page 0 when clicking a sortable column, does nothing when clicking on unsortable column" time="0.057" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable sorting sorts rows according to initially selected sort column and direction" time="0.036" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable sorting sorts rows according to the selected sort column and direction" time="0.053" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable sorting paginates the data correctly according to the sorted order" time="0.081" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable rows renders rows properly, according to specification" time="0.041" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable rows highlights rows properly, according to highlight function in data store" time="0.015" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable column visibility shows initially visible columns at first, and does not show invisible ones" time="0.007" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable column visibility allows changing column visibility" time="0.056" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable column visibility does not break if no columns are visible" time="0.135" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable filtering (IMPORTANT: assuming delay of 400ms) does not filter through invisible columns" time="0.032" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable filtering (IMPORTANT: assuming delay of 400ms) shows no rows if filtering is attempted when no columns have defined filter functions" time="0.009" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable filtering (IMPORTANT: assuming delay of 400ms) filters columns with a defined filter function, and shows all rows when filtered with empty string" time="0.02" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable downloading data gives just the column names when theres no data in the table" time="0.009" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable downloading data gives one row of data when theres one row. data given for every column, including hidden, and without download def'n. if no data, gives empty string for that cell." time="0.025" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable downloading data gives data for all rows. data given for every column, including hidden, and without download def'n. if no data, gives empty string for that cell" time="0.021" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable downloading data gives data back in sorted order according to initially selected sort column and direction" time="0.026" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable downloading data gives data for data with multiple elements" time="0.024" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable pagination starts with 50 items per page" time="0.027" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable pagination limits page accessing appropriately, depending on how many items total and how many per page, and changes page numbers correctly" time="0.058" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable pagination properly handles changing items per page" time="0.169" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable pagination shows the correct data for given page" time="0.113" classname="LazyMobXTable"/>
  <testcase name="LazyMobXTable pagination shows the right text before the paging buttons" time="0.057" classname="LazyMobXTable"/>
  <testcase name="AlleleCountColumnFormatter what does it do?" time="0" classname="AlleleCountColumnFormatter"/>
  <testcase name="AnnotationColumnFormatter properly creates a civic entry" time="0.002" classname="AnnotationColumnFormatter"/>
  <testcase name="ChromosomeColumnFormatter properly extracts sort value from a chromosome string value" time="0.001" classname="ChromosomeColumnFormatter"/>
  <testcase name="CohortColumnFormatter what does it do?" time="0" classname="CohortColumnFormatter"/>
  <testcase name="CosmicColumnFormatter generates component tooltip" time="0.001" classname="CosmicColumnFormatter"/>
  <testcase name="CosmicColumnFormatter renders display value" time="0" classname="CosmicColumnFormatter"/>
  <testcase name="CosmicColumnFormatter sets component cell value property" time="0.001" classname="CosmicColumnFormatter"/>
  <testcase name="GeneColumnFormatter renders display value" time="0" classname="GeneColumnFormatter"/>
  <testcase name="MrnaExprColumnFormatter what does it do?" time="0" classname="MrnaExprColumnFormatter"/>
  <testcase name="MutationStatusColumnFormatter gets mutation status data properly" time="0" classname="MutationStatusColumnFormatter"/>
  <testcase name="MutationStatusColumnFormatter renders component display value, class name, and cell value property" time="0.001" classname="MutationStatusColumnFormatter"/>
  <testcase name="MutationStatusColumnFormatter adds tooltips only for germline and somatic mutation statuses" time="0.001" classname="MutationStatusColumnFormatter"/>
  <testcase name="MutationTypeColumnFormatter renders component display value, class name, and cell value property" time="0.003" classname="MutationTypeColumnFormatter"/>
  <testcase name="ProteinChangeColumnFormatter renders protein change display value" time="0.001" classname="ProteinChangeColumnFormatter"/>
  <testcase name="ProteinChangeColumnFormatter adds tooltip for long protein change values" time="0" classname="ProteinChangeColumnFormatter"/>
  <testcase name="ProteinChangeColumnFormatter renders germline indicator" time="0.001" classname="ProteinChangeColumnFormatter"/>
  <testcase name="ProteinChangeColumnFormatter properly extracts sort value from a protein change string value" time="0" classname="ProteinChangeColumnFormatter"/>
  <testcase name="SampleColumnFormatter renders sample display value" time="0.001" classname="SampleColumnFormatter"/>
  <testcase name="SampleColumnFormatter generates component tooltip" time="0" classname="SampleColumnFormatter"/>
  <testcase name="MutationStatusColumnFormatter gets validation status data properly" time="0" classname="MutationStatusColumnFormatter"/>
  <testcase name="MutationStatusColumnFormatter renders component display value, class name, and cell value property" time="0.002" classname="MutationStatusColumnFormatter"/>
  <testcase name="MutationStatusColumnFormatter adds tooltips for valid, wildtype, and unknown validation statuses" time="0.016" classname="MutationStatusColumnFormatter"/>
  <testcase name="DataUtils selectDisplayValue returns undefined if no values" time="0" classname="DataUtils"/>
  <testcase name="DataUtils selectDisplayValue returns the lone value if one value" time="0" classname="DataUtils"/>
  <testcase name="DataUtils selectDisplayValue returns the lowest priority value if two values" time="0" classname="DataUtils"/>
  <testcase name="DataUtils selectDisplayValue returns the lowest priority value if several values" time="0" classname="DataUtils"/>
  <testcase name="DataUtils selectDisplayValue returns the lowest priority, highest count value if two values w same priority" time="0" classname="DataUtils"/>
  <testcase name="DataUtils selectDisplayValue returns the lowest priority, highest count value if several values w same priority" time="0.001" classname="DataUtils"/>
  <testcase name="DataUtils fillGeneticTrackDatum fills a datum w no data correctly" time="0" classname="DataUtils"/>
  <testcase name="DataUtils fillGeneticTrackDatum fills a datum w one mutation data correctly" time="0.001" classname="DataUtils"/>
  <testcase name="DataUtils fillGeneticTrackDatum fills a datum w one cna data correctly" time="0.001" classname="DataUtils"/>
  <testcase name="DataUtils fillGeneticTrackDatum fills a datum w one mrna data correctly" time="0.001" classname="DataUtils"/>
  <testcase name="DataUtils fillGeneticTrackDatum fills a datum w one protein data correctly" time="0.001" classname="DataUtils"/>
  <testcase name="DataUtils fillGeneticTrackDatum fills a datum w two mutation data w correct priority" time="0" classname="DataUtils"/>
  <testcase name="DataUtils fillGeneticTrackDatum fills a datum w multiple cna data w correct priority" time="0" classname="DataUtils"/>
  <testcase name="DataUtils fillGeneticTrackDatum fills a datum w multiple mrna data w correct priority" time="0" classname="DataUtils"/>
  <testcase name="DataUtils fillGeneticTrackDatum fills a datum w multiple protein data w correct priority" time="0.001" classname="DataUtils"/>
  <testcase name="DataUtils fillGeneticTrackDatum fills a datum w several data of different types correctly" time="0.001" classname="DataUtils"/>
  <testcase name="DataUtils fillHeatmapTrackDatum sets na true if no data" time="0.001" classname="DataUtils"/>
  <testcase name="DataUtils fillHeatmapTrackDatum sets data for sample" time="0.001" classname="DataUtils"/>
  <testcase name="DataUtils fillHeatmapTrackDatum throws exception if more than one data given for sample" time="0.001" classname="DataUtils"/>
  <testcase name="DataUtils fillHeatmapTrackDatum sets data for patient, if multiple then maximum in abs value" time="0.001" classname="DataUtils"/>
  <testcase name="DataUtils fillHeatmapTrackDatum fills data for a gene set if that's requested" time="0.001" classname="DataUtils"/>
  <testcase name="DataUtils fillClinicalTrackDatum creates datum correctly when no data given" time="0.001" classname="DataUtils"/>
  <testcase name="DataUtils fillClinicalTrackDatum creates data correctly for number data" time="0.001" classname="DataUtils"/>
  <testcase name="DataUtils fillClinicalTrackDatum creates data correctly for string data" time="0" classname="DataUtils"/>
  <testcase name="DataUtils fillClinicalTrackDatum creates data correctly for mutation spectrum data" time="0" classname="DataUtils"/>
  <testcase name="Oncoprint DeltaUtils numTracksWhoseDataChanged should return 0 for empty inputs" time="0.002" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils numTracksWhoseDataChanged should return 2 for one empty input and one with two (both added/deleted)" time="0" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils numTracksWhoseDataChanged should return 3 for one track deleted, one track added, one track changed" time="0" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils numTracksWhoseDataChanged should return X for X tracks changed" time="0" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils transitionTrackGroupSortPriority should not do anything if the heatmap tracks are both empty" time="0.001" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils transitionTrackGroupSortPriority should not do anything on initialisation if no heatmap tracks are added" time="0" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils transitionTrackGroupSortPriority should not do anything if the heatmap tracks are the same" time="0" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils transitionTrackGroupSortPriority should not do anything if the gene set heatmap tracks are the same" time="0.001" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils transitionTrackGroupSortPriority should not do anything if the heatmap tracks are different but same groups" time="0.001" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils transitionTrackGroupSortPriority should set the track group sort priority if the heatmap track groups have changed and no gene set heatmap is present" time="0.001" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils transitionTrackGroupSortPriority should set the track group sort priority including gene set heatmaps if heatmap track groups have changed" time="0.001" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils transitionTrackGroupSortPriority should set the track group sort priority on initialisation if only a gene set heatmap is present" time="0" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils transitionSortConfig should not do anything if no sortConfig specified" time="0.001" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils transitionSortConfig should not do anything if the given sort configs have no order or cluster heatmap group specified, regardless of changes" time="0.001" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils transitionSortConfig should set the config to new order if order is specified, no sort config specified before" time="0" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils transitionSortConfig should set the config to new order if order is specified, no order specified before" time="0" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils transitionSortConfig should set the config to new order if order is specified, different order specified before" time="0" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils transitionSortConfig should not do anything if same order given (same object, shallow equality)" time="0" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils transitionSortConfig should set the config to order, if order and cluster heatmap group specified" time="0" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils transitionSortConfig should set the config to heatmap if heatmap index specified, no sort config specified before" time="0.001" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils transitionSortConfig should set the config to heatmap if heatmap index specified, no heatmap index or order specified before" time="0" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils transitionSortConfig should set the config to heatmap if heatmap index specified, no heatmap index specified before, order specified before" time="0" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils transitionSortConfig should set the config to heatmap if heatmap index specified, different heatmap index specified before" time="0.001" classname="Oncoprint DeltaUtils"/>
  <testcase name="Oncoprint DeltaUtils transitionSortConfig should not do anything if heatmap index specified, same heatmap index specified before" time="0" classname="Oncoprint DeltaUtils"/>
  <testcase name="OncoprintUtils percentAltered returns the percentage with no decimal digits, for percentages >= 3" time="0.001" classname="OncoprintUtils"/>
  <testcase name="OncoprintUtils percentAltered returns the percentage with one decimal digit, for percentages &lt; 3, unless its exact" time="0" classname="OncoprintUtils"/>
  <testcase name="SortUtils alphabeticalDefault should return -1 when the input comparator returns -1 (d1.val &lt; d2.val)" time="0" classname="SortUtils"/>
  <testcase name="SortUtils alphabeticalDefault should return 1 when the input comparator returns 1 (d1.val > d2.val)" time="0" classname="SortUtils"/>
  <testcase name="SortUtils alphabeticalDefault should return -1 when the input comparator returns 0 (d1.val = d2.val) and d1.sample alphabetically before d2.sample" time="0.001" classname="SortUtils"/>
  <testcase name="SortUtils alphabeticalDefault should return 1 when the input comparator returns 0 (d1.val = d2.val) and d1.sample alphabetically after d2.sample" time="0" classname="SortUtils"/>
  <testcase name="SortUtils alphabeticalDefault should return 0 when the input comparator returns 0 (d1.val = d2.val) and d1.sample = d2.sample" time="0.001" classname="SortUtils"/>
  <testcase name="SortUtils alphabeticalDefault should return -1 when the input comparator returns 0 (d1.val = d2.val) and d1.patient alphabetically before d2.patient" time="0" classname="SortUtils"/>
  <testcase name="SortUtils alphabeticalDefault should return 1 when the input comparator returns 0 (d1.val = d2.val) and d1.patient alphabetically after d2.patient" time="0" classname="SortUtils"/>
  <testcase name="SortUtils alphabeticalDefault should return 0 when the input comparator returns 0 (d1.val = d2.val) and d1.patient = d2.patient" time="0.001" classname="SortUtils"/>
  <testcase name="SortUtils stringClinicalComparator should return -1 when neither have na and first attr_val comes before second" time="0" classname="SortUtils"/>
  <testcase name="SortUtils stringClinicalComparator should return 1 when neither have na and first attr_val comes after second" time="0" classname="SortUtils"/>
  <testcase name="SortUtils stringClinicalComparator should return 0 when neither have na and first attr_val equals second" time="0.001" classname="SortUtils"/>
  <testcase name="SortUtils stringClinicalComparator should return 0 when both have na" time="0" classname="SortUtils"/>
  <testcase name="SortUtils stringClinicalComparator should return 2 when first has na and second doesnt" time="0" classname="SortUtils"/>
  <testcase name="SortUtils stringClinicalComparator should return -2 when first doesnt have na and second does" time="0" classname="SortUtils"/>
  <testcase name="Oncoprint TooltipUtils makeGeneticTrackTooltip custom driver annotations should show a binary custom driver icon with descriptive title, if theres a binary custom driver annotation" time="0.005" classname="Oncoprint TooltipUtils"/>
  <testcase name="Oncoprint TooltipUtils makeGeneticTrackTooltip custom driver annotations should show multiple binary custom driver icons with corresponding titles, if there are multiple annotated mutations" time="0.001" classname="Oncoprint TooltipUtils"/>
  <testcase name="Oncoprint TooltipUtils makeGeneticTrackTooltip custom driver annotations should not show a binary custom driver icon with descriptive title, if theres a binary annotation of non-driver" time="0.001" classname="Oncoprint TooltipUtils"/>
  <testcase name="Oncoprint TooltipUtils makeGeneticTrackTooltip custom driver annotations should show a tiers custom driver icon with descriptive title, if theres a tiers custom driver annotation" time="0.001" classname="Oncoprint TooltipUtils"/>
  <testcase name="Oncoprint TooltipUtils makeGeneticTrackTooltip custom driver annotations should show multiple tiers icons with corresponding titles, if there are multiple annotated mutations" time="0.001" classname="Oncoprint TooltipUtils"/>
  <testcase name="Oncoprint TooltipUtils makeGeneticTrackTooltip custom driver annotations should show both binary and tiers custom driver icons, with descriptive titles, if there are both annotations" time="0.001" classname="Oncoprint TooltipUtils"/>
  <testcase name="Oncoprint TooltipUtils makeGeneticTrackTooltip custom driver annotations should show neither icon if theres no custom driver annotations" time="0" classname="Oncoprint TooltipUtils"/>
  <testcase name="Oncoprint TooltipUtils makeClinicalTrackTooltip should show the given sample id" time="0.001" classname="Oncoprint TooltipUtils"/>
  <testcase name="Oncoprint TooltipUtils makeClinicalTrackTooltip should show the given patient id" time="0.001" classname="Oncoprint TooltipUtils"/>
  <testcase name="Oncoprint TooltipUtils makeClinicalTrackTooltip should show the correct output for a single value" time="0" classname="Oncoprint TooltipUtils"/>
  <testcase name="Oncoprint TooltipUtils makeClinicalTrackTooltip should show the correct output for multiple values" time="0.001" classname="Oncoprint TooltipUtils"/>
  <testcase name="Oncoprint TooltipUtils makeClinicalTrackTooltip should show numerical data rounded to 2 decimal digits" time="0.001" classname="Oncoprint TooltipUtils"/>
  <testcase name="Oncoprint TooltipUtils makeHeatmapTrackTooltip should show data rounded to 2 decimal digits" time="0.001" classname="Oncoprint TooltipUtils"/>
  <testcase name="PaginationControls 'Show more' button on click, increases the itemsPerPage until everything is shown, in proper increments, then disables" time="0" classname="PaginationControls">
    <skipped/>
  </testcase>
  <testcase name="PaginationControls 'Show more' button is hidden if everything is shown initially" time="0" classname="PaginationControls">
    <skipped/>
  </testcase>
  <testcase name="PaginationControls 'Show more' button shows functional reset button if its showing more than minimum per page" time="0" classname="PaginationControls">
    <skipped/>
  </testcase>
  <testcase name="CaseSetSelector filterCaseSetOptions lambda filters without case sensitivity" time="0.002" classname="CaseSetSelector"/>
  <testcase name="DataTypePrioritySelector profileAvailability returns correct profile availability result in case of zero profiles" time="0.001" classname="DataTypePrioritySelector"/>
  <testcase name="DataTypePrioritySelector profileAvailability returns correct profile availability result in case of one profile" time="0.001" classname="DataTypePrioritySelector"/>
  <testcase name="DataTypePrioritySelector profileAvailability returns correct profile availability result in case of two profiles" time="0.001" classname="DataTypePrioritySelector"/>
  <testcase name="DataTypePrioritySelector profileAvailability returns correct profile availability result in case of several profiles" time="0" classname="DataTypePrioritySelector"/>
  <testcase name="DataTypePrioritySelector radioButtons shows the right buttons when theres mutation and cna profiles available" time="0.001" classname="DataTypePrioritySelector"/>
  <testcase name="DataTypePrioritySelector radioButtons shows the right buttons when theres just mutation profiles available" time="0" classname="DataTypePrioritySelector"/>
  <testcase name="DataTypePrioritySelector radioButtons shows the right buttons when theres just cna profiles available" time="0.001" classname="DataTypePrioritySelector"/>
  <testcase name="QueryAndDownloadTabs Hides download tab if prop showDownloadTab is false" time="0.002" classname="QueryAndDownloadTabs"/>
  <testcase name="QueryStore initialQueryParams on results page should contain the correct case_ids parameter in single study query" time="0.01" classname="QueryStore"/>
  <testcase name="QueryStore initialQueryParams on results page should contain the correct case_ids parameter in multiple study query" time="0.003" classname="QueryStore"/>
  <testcase name="QueryStoreUtils nonMolecularProfileParams returns url-encoded, normalized query for gene_list parameter" time="0.007" classname="QueryStoreUtils"/>
  <testcase name="QueryStoreUtils nonMolecularProfileParams correctly sets study parameters in case of single study" time="0.007" classname="QueryStoreUtils"/>
  <testcase name="SampleLabel what does it do?" time="0" classname="SampleLabel"/>
  <testcase name="SimpleTable renders 3 rows if passed headers and two rows" time="0" classname="SimpleTable"/>
  <testcase name="SimpleTable renders no result message when rows is empty array" time="0.001" classname="SimpleTable"/>
  <testcase name="SimpleTable has class name of className prop if provided" time="0.001" classname="SimpleTable"/>
  <testcase name="SimpleTable does not have class name of 'undefined' if className prop is undefined" time="0" classname="SimpleTable"/>
  <testcase name="PdbResidueUtils converts pdb positions to residue codes" time="0.001" classname="PdbResidueUtils"/>
  <testcase name="PdbResidueUtils converts pdb positions to residue and insertion code pairs" time="0" classname="PdbResidueUtils"/>
  <testcase name="PdbResidueUtils converts pdb residue specs to residue helper map" time="0.003" classname="PdbResidueUtils"/>
  <testcase name="PdbResidueUtils finds the updated residues" time="0.004" classname="PdbResidueUtils"/>
  <testcase name="PyMolScriptGenerator properly generates the initializer script" time="0.004" classname="PyMolScriptGenerator"/>
  <testcase name="PyMolScriptGenerator sets color and the opacity properly for the base structure and the chain" time="0.002" classname="PyMolScriptGenerator"/>
  <testcase name="PyMolScriptGenerator applies correct protein style wrt the corresponding prop" time="0.002" classname="PyMolScriptGenerator"/>
  <testcase name="PyMolScriptGenerator does not display bound molecules when the corresponding prop is set to false" time="0.001" classname="PyMolScriptGenerator"/>
  <testcase name="PyMolScriptGenerator applies correct protein colors wrt the corresponding prop" time="0.003" classname="PyMolScriptGenerator"/>
  <testcase name="PyMolScriptGenerator colors residues with correct colors" time="0.007" classname="PyMolScriptGenerator"/>
  <testcase name="PyMolScriptGenerator displays side chain atoms wrt the corresponding props" time="0.003" classname="PyMolScriptGenerator"/>
  <testcase name="StructureVisualizer3D properly initializes the 3D visualizer" time="0.01" classname="StructureVisualizer3D"/>
  <testcase name="StructureVisualizer3D sets chain color and the opacity properly" time="0.008" classname="StructureVisualizer3D"/>
  <testcase name="StructureVisualizer3D sets the base structure color and the opacity properly" time="0.007" classname="StructureVisualizer3D"/>
  <testcase name="StructureVisualizer3D applies correct protein style wrt the corresponding prop" time="0.022" classname="StructureVisualizer3D"/>
  <testcase name="StructureVisualizer3D does not display bound molecules when the corresponding prop is set to false" time="0.012" classname="StructureVisualizer3D"/>
  <testcase name="StructureVisualizer3D applies correct protein colors wrt the corresponding prop" time="0.028" classname="StructureVisualizer3D"/>
  <testcase name="StructureVisualizer3D colors residues with correct colors" time="0" classname="StructureVisualizer3D">
    <skipped/>
  </testcase>
  <testcase name="StructureVisualizer3D styles and colors side chain atoms wrt the corresponding props" time="0" classname="StructureVisualizer3D">
    <skipped/>
  </testcase>
  <testcase name="TableHeaderControls bindCopyButton is called only when there is a copy button and props flag is true" time="0" classname="TableHeaderControls"/>
  <testcase name="TableHeaderControls Renders child controls according to prop flags" time="0.011" classname="TableHeaderControls"/>
  <testcase name="TableHeaderControls input to search box causes handleInput to be called" time="0.001" classname="TableHeaderControls"/>
  <testcase name="UnsupportedBrowserModal does not show modal when Chrome is being used" time="0.001" classname="UnsupportedBrowserModal"/>
  <testcase name="UnsupportedBrowserModal does not show modal when Edge is being used" time="0" classname="UnsupportedBrowserModal"/>
  <testcase name="UnsupportedBrowserModal does not show when state is manually set to false" time="0.001" classname="UnsupportedBrowserModal"/>
  <testcase name="UnsupportedBrowserModal does not show modal when Safari is being used" time="0" classname="UnsupportedBrowserModal"/>
  <testcase name="UnsupportedBrowserModal does not show modal when Firefox is being used" time="0" classname="UnsupportedBrowserModal"/>
  <testcase name="UnsupportedBrowserModal shows modal when IE10 is being used and site is accessed for first time" time="0" classname="UnsupportedBrowserModal">
    <skipped/>
  </testcase>
  <testcase name="UnsupportedBrowserModal does not show modal when IE10 is being used and &quot;do not show has&quot; been checked" time="0" classname="UnsupportedBrowserModal"/>
  <testcase name="UnsupportedBrowserModal shows no modal when IE11 is being used" time="0.001" classname="UnsupportedBrowserModal"/>
  <testcase name="AnnotationUtils checks if a mutation is a hotspot mutation" time="0.001" classname="AnnotationUtils"/>
  <testcase name="CancerHotspotsUtils properly creates hotspot index" time="0" classname="CancerHotspotsUtils"/>
  <testcase name="test router store updateroute method deletes parameters, alters existing params and adds new ones" time="0.005" classname="test"/>
  <testcase name="test router store updateroute method updates path if one is passed, otherwise, retains existing path" time="0.002" classname="test"/>
  <testcase name="test router store updateroute method updates path if one is passed, otherwise, retains existing path" time="0.002" classname="test"/>
  <testcase name="toFixedWithThreshold has the same behavior with regular toFixed function when the result is not expected to be a zero value" time="0.001" classname="toFixedWithThreshold"/>
  <testcase name="toFixedWithThreshold returns zero value string only if the actual value is zero" time="0" classname="toFixedWithThreshold"/>
  <testcase name="toFixedWithThreshold converts zero value results into an inequality if the actual value is not zero" time="0.002" classname="toFixedWithThreshold"/>
  <testcase name="toFixedWithThreshold works for negative numbers too" time="0" classname="toFixedWithThreshold"/>
  <testcase name="HotspotSet works with empty input" time="0.001" classname="HotspotSet"/>
  <testcase name="HotspotSet works with one input region" time="0" classname="HotspotSet"/>
  <testcase name="HotspotSet works with one singleton region (i.e. single residue)" time="0.001" classname="HotspotSet"/>
  <testcase name="HotspotSet works with one singleton region and one interval region" time="0" classname="HotspotSet"/>
  <testcase name="HotspotSet works with one region, consolidated from a few input regions" time="0.001" classname="HotspotSet"/>
  <testcase name="HotspotSet works with two regions, consolidated from several input regions" time="0" classname="HotspotSet"/>
  <testcase name="HotspotSet works with three regions, consolidated from several input regions" time="0" classname="HotspotSet"/>
  <testcase name="HotspotSet works with three regions, consolidated from several input regions, using `add` instead of constructor" time="0.001" classname="HotspotSet"/>
  <testcase name="SimpleMobXApplicationDataStore initializes with given data, and returns proper defaults" time="0.002" classname="SimpleMobXApplicationDataStore"/>
  <testcase name="SimpleMobXApplicationDataStore sorts according to given metric and direction" time="0" classname="SimpleMobXApplicationDataStore"/>
  <testcase name="SimpleMobXApplicationDataStore filters according to given filter, case: filter that takes filter string into account" time="0.001" classname="SimpleMobXApplicationDataStore"/>
  <testcase name="SimpleMobXApplicationDataStore filters according to given filter, case: filter that does not take filter string into account" time="0.001" classname="SimpleMobXApplicationDataStore"/>
  <testcase name="SimpleMobXApplicationDataStore gives correct tableData, and resetFilter works properly" time="0" classname="SimpleMobXApplicationDataStore"/>
  <testcase name="LazyMobXCache #addData adds data properly, and returns data using #peek if it exists in the cache" time="0.028" classname="LazyMobXCache"/>
  <testcase name="LazyMobXCache #get passes static dependencies into fetch correctly" time="0.005" classname="LazyMobXCache"/>
  <testcase name="LazyMobXCache #get returns data if it exists" time="0.007" classname="LazyMobXCache"/>
  <testcase name="LazyMobXCache #get doesnt try to fetch already resolved data" time="0.003" classname="LazyMobXCache"/>
  <testcase name="LazyMobXCache #get doesnt try to double-fetch data that has already been requested and is pending" time="0.004" classname="LazyMobXCache"/>
  <testcase name="LazyMobXCache #get returns no data if no data exists" time="0.005" classname="LazyMobXCache"/>
  <testcase name="LazyMobXCache #get returns an error if fetching failed, and doesnt try to fetch data that has errored" time="0.064" classname="LazyMobXCache"/>
  <testcase name="LazyMobXCache #get adds data using metadata given by fetch" time="0.006" classname="LazyMobXCache"/>
  <testcase name="LazyMobXCache #get returns null if fetch pending" time="0.001" classname="LazyMobXCache"/>
  <testcase name="LazyMobXCache #get debounces calls to get" time="0.001" classname="LazyMobXCache"/>
  <testcase name="LazyMobXCache #get triggers any mobx reaction that touches the cache when its updated" time="0.006" classname="LazyMobXCache"/>
  <testcase name="LazyMobXCache #getPromise resolves immediately if the selected queries are already there" time="0.046" classname="LazyMobXCache"/>
  <testcase name="LazyMobXCache #getPromise resolves when the selected queries become available: request made" time="0.021" classname="LazyMobXCache"/>
  <testcase name="LazyMobXCache #getPromise resolves when the selected queries become available: request not made" time="0.025" classname="LazyMobXCache"/>
  <testcase name="LazyMobXCache #getPromise errors if there is an error" time="0.021" classname="LazyMobXCache"/>
  <testcase name="LazyMobXCache #getPromise can handle multiple pending listeners" time="0.022" classname="LazyMobXCache"/>
  <testcase name="LazyMobXCache #getPromise unregisters the listener once it has been triggered: resolve" time="0.019" classname="LazyMobXCache"/>
  <testcase name="LazyMobXCache #getPromise unregisters the listener once it has been triggered: error" time="0.018" classname="LazyMobXCache"/>
  <testcase name="MutationUtils groupMutationsByGeneAndPatientAndProteinChange groups mutations correctly by gene, patient, and protein change" time="0.001" classname="MutationUtils"/>
  <testcase name="MutationUtils countUniqueMutations counts unique mutations as zero when there are no mutations" time="0.001" classname="MutationUtils"/>
  <testcase name="MutationUtils countUniqueMutations counts unique mutations correctly" time="0.001" classname="MutationUtils"/>
  <testcase name="MutationUtils countDuplicateMutations counts duplicate mutations as zero when there are no mutations" time="0.003" classname="MutationUtils"/>
  <testcase name="MutationUtils countDuplicateMutations counts duplicates correctly for mutations grouped by patients" time="0" classname="MutationUtils"/>
  <testcase name="MutationUtils somaticMutationRate calculates rate correctly" time="0.002" classname="MutationUtils"/>
  <testcase name="MutationUtils germlineMutationRate calculates rate correctly" time="0.001" classname="MutationUtils"/>
  <testcase name="MutationUtils uniqueGenomicLocations extracts unique genomic locations" time="0.002" classname="MutationUtils"/>
  <testcase name="ObjectManipulation functions should rename keys in a flat object" time="0.001" classname="ObjectManipulation functions"/>
  <testcase name="ObjectManipulation functions should remove keys in a flat object" time="0" classname="ObjectManipulation functions"/>
  <testcase name="OncoKbUtils what does it do?" time="0.001" classname="OncoKbUtils"/>
  <testcase name="PdbUtils merges alignments properly" time="0.006" classname="PdbUtils"/>
  <testcase name="PfamUtils assigns colors for PFAM domains in the correct order" time="0.001" classname="PfamUtils"/>
  <testcase name="PromiseUtils addTimeoutToPromise should reject if timeout occurs" time="0.117" classname="PromiseUtils"/>
  <testcase name="PromiseUtils addTimeoutToPromise should not reject if resolves before timeout" time="0.034" classname="PromiseUtils"/>
  <testcase name="PromiseUtils addTimeoutToPromise should reject with same argument if promise rejects" time="0.128" classname="PromiseUtils"/>
  <testcase name="PromiseUtils addTimeoutToPromise should resolve with same argument if promise resolves" time="0.128" classname="PromiseUtils"/>
  <testcase name="StoreUtils fetchCosmicCount won't fetch cosmic data if there are no mutations" time="0.001" classname="StoreUtils"/>
  <testcase name="StoreUtils fetchCosmicCount won't fetch cosmic data if there ARE mutations, but none with keywords" time="0.021" classname="StoreUtils"/>
  <testcase name="StoreUtils fetchCosmicCount will fetch cosmic data if there are mutations with keywords" time="0.017" classname="StoreUtils"/>
  <testcase name="StoreUtils makeStudyToCancerTypeMap gives empty map if no studies" time="0.001" classname="StoreUtils"/>
  <testcase name="StoreUtils makeStudyToCancerTypeMap handles one study properly" time="0" classname="StoreUtils"/>
  <testcase name="StoreUtils makeStudyToCancerTypeMap handles more than one study properly" time="0" classname="StoreUtils"/>
  <testcase name="StoreUtils mergeMutationsIncludingUncalled merges mutations properly when there is only fusion data" time="0.002" classname="StoreUtils"/>
  <testcase name="StoreUtils mergeMutationsIncludingUncalled merges mutations properly when there is only mutation data" time="0.001" classname="StoreUtils"/>
  <testcase name="StoreUtils mergeMutationsIncludingUncalled merges mutations properly when there are both mutation and fusion data " time="0" classname="StoreUtils"/>
  <testcase name="StoreUtils mergeMutationsIncludingUncalled does not include new mutation events from the uncalled mutations, only mutation events already called in >=1 sample should be added" time="0" classname="StoreUtils"/>
  <testcase name="StoreUtils fetchOncoKbData won't fetch onkokb data if there are no mutations" time="0.001" classname="StoreUtils"/>
  <testcase name="StoreUtils fetchGermlineConsentedSamples won't fetch germline consented samples for studies with no germline data" time="0.021" classname="StoreUtils"/>
  <testcase name="StoreUtils fetchGermlineConsentedSamples will fetch germline consented samples for only the studies with germline data" time="0.016" classname="StoreUtils"/>
  <testcase name="StoreUtils fetchCivicData won't fetch civic genes if there are no mutations" time="0.017" classname="StoreUtils"/>
  <testcase name="StoreUtils fetchCivicData won't fetch civic variants if there are no mutations" time="0.014" classname="StoreUtils"/>
  <testcase name="StoreUtils fetchCivicData won't fetch civic variants if there are no civic genes" time="0.016" classname="StoreUtils"/>
  <testcase name="StoreUtils samples without cancer type clinical data finds samples without cancer type clinical data" time="0.016" classname="StoreUtils"/>
  <testcase name="StoreUtils samples without cancer type clinical data fetches samples without cancer type clinical data" time="0.004" classname="StoreUtils"/>
  <testcase name="StoreUtils samples without cancer type clinical data fetches studies for samples without cancer type clinical data" time="0.002" classname="StoreUtils"/>
  <testcase name="longestCommonStartingSubstring finds correct result on various inputs" time="0" classname="longestCommonStartingSubstring"/>
  <testcase name="stringListToSet gives correct result on various inputs" time="0" classname="stringListToSet"/>
  <testcase name="stringListToIndexSet gives correct result on various inputs" time="0" classname="stringListToIndexSet"/>
  <testcase name="UuidUtils recovers the input study/sample/patient properly" time="0.004" classname="UuidUtils"/>
  <testcase name="accumulatingDebounce calls the add function once, followed by the final function, when the returned function is called once" time="0" classname="accumulatingDebounce"/>
  <testcase name="accumulatingDebounce calls the add function three times, followed by the final function once, when the returned function is called three times in succession" time="0" classname="accumulatingDebounce"/>
  <testcase name="accumulatingDebounce accumulates arguments as specified, and only triggers the final function with them once per burst" time="0.001" classname="accumulatingDebounce"/>
  <testcase name="accumulatingDebounce waits the specified number of milliseconds before executing" time="0" classname="accumulatingDebounce"/>
  <testcase name="accumulatingDebounce does not execute if cancelled" time="0.001" classname="accumulatingDebounce"/>
  <testcase name="alterationCountHelpers #countAlterationOccurences count total samples and alteration totals" time="0.008" classname="alterationCountHelpers"/>
  <testcase name="alterationCountHelpers #countAlterationOccurences counts an added fusion alteration and CNA alterations, according to CNA sub types" time="0.001" classname="alterationCountHelpers"/>
  <testcase name="alterationCountHelpers #countAlterationOccurences samples with multiple mutations are only counted as &quot;multiple&quot;; alteration total reflects ALL alterations; does not double count multiple alterations to same sample in alteredSampleCount" time="0.001" classname="alterationCountHelpers"/>
  <testcase name="alterationCountHelpers #countAlterationOccurences uses alterationSubType to evaluate MRNA direction" time="0.002" classname="alterationCountHelpers"/>
  <testcase name="alterationCountHelpers #countAlterationOccurences uses alterationSubType to evaluate PROT direction" time="0.002" classname="alterationCountHelpers"/>
  <testcase name="test exposeComponentRenderer puts a function on window object. calling the function renders the passed component" time="0.002" classname="test"/>
  <testcase name="findFirstMostCommonElt returns undefined with empty list input" time="0" classname="findFirstMostCommonElt"/>
  <testcase name="findFirstMostCommonElt returns only element with single element list" time="0" classname="findFirstMostCommonElt"/>
  <testcase name="findFirstMostCommonElt returns first element in two element list" time="0" classname="findFirstMostCommonElt"/>
  <testcase name="findFirstMostCommonElt returns most common element in three element list" time="0" classname="findFirstMostCommonElt"/>
  <testcase name="findFirstMostCommonElt returns first, most common element in longer list of strings" time="0" classname="findFirstMostCommonElt"/>
  <testcase name="getProteinImpactType maps mutation types to appropriate buckets" time="0.001" classname="getProteinImpactType"/>
  <testcase name="getOverlappingStudies finds overlapping studies based on pub/nonpub signature in studyId" time="0.002" classname="getOverlappingStudies"/>
  <testcase name="getOverlappingStudies finds overlapping studies based on year suffix" time="0.001" classname="getOverlappingStudies"/>
  <testcase name="getOverlappingStudies doesn'nt detect non TCGA stuides" time="0" classname="getOverlappingStudies"/>
  <testcase name="getOverlappingStudies finds them when year and pub are suffixes" time="0" classname="getOverlappingStudies"/>
  <testcase name="onMobxPromise executes the given callback with the result when the mobx promise completes" time="0.027" classname="onMobxPromise"/>
  <testcase name="onMobxPromise executes the given callback with the results when the mobx promises complete" time="0.078" classname="onMobxPromise"/>
  <testcase name="onMobxPromise executes the given callback the specified number of times" time="0.136" classname="onMobxPromise"/>
  <testcase name="onMobxPromise executes immediately if the promise is already resolved, does not execute again" time="0.118" classname="onMobxPromise"/>
  <testcase name="reactionWithPrev passes through the correct arguments each time" time="0.017" classname="reactionWithPrev"/>
  <testcase name="restoreRouteAfterRedirect calls getItem with appropriate key" time="0.001" classname="restoreRouteAfterRedirect"/>
  <testcase name="restoreRouteAfterRedirect if no key is available, we redirect to root route" time="0" classname="restoreRouteAfterRedirect"/>
  <testcase name="restoreRouteAfterRedirect if key is available, we redirect to it, sans #, delete key" time="0" classname="restoreRouteAfterRedirect"/>
  <testcase name="validateParameters function recognizes valid and invalid url parameter combinations according to provided rules" time="0.007" classname="validateParameters function"/>
  <system-out>
    <![CDATA[PhantomJS 2.1.1 (Mac OS X 0.0.0) WARN: 'Warning: ReactTestUtils has been moved to react-dom/test-utils. Update references to remove this warning.'
,PhantomJS 2.1.1 (Mac OS X 0.0.0) LOG: 'JQMIGRATE: Migrate is installed with logging active, version 3.0.0'
,PhantomJS 2.1.1 (Mac OS X 0.0.0) WARN: 'JQMIGRATE: jQuery.unique is deprecated, use jQuery.uniqueSort'
,PhantomJS 2.1.1 (Mac OS X 0.0.0) ERROR: 'Unhandled promise rejection', Error{original: null, response: Response{req: Request{_query: ..., method: ..., url: ..., header: ..., _header: ..., _callbacks: ..., _endCalled: ..., _callback: ..., xhr: ...}, xhr: Object{readyState: ..., timeout: ..., onloadend: ..., withCredentials: ..., onloadstart: ..., status: ..., ontimeout: ..., onabort: ..., upload: ..., onreadystatechange: ..., responseType: ..., response: ..., responseXML: ..., onload: ..., onerror: ..., statusText: ..., onprogress: ..., responseText: ...}, text: 'NOT FOUND', statusText: 'Not Found', statusCode: 404, status: 404, statusType: 4, info: false, ok: false, redirect: false, clientError: true, serverError: false, error: Error{status: ..., method: ..., url: ...}, accepted: false, noContent: false, badRequest: false, unauthorized: false, notAcceptable: false, forbidden: false, notFound: true, headers: Object{connection: ..., date: ..., transfer-encoding: ..., content-type: ...}, header: Object{connection: ..., date: ..., transfer-encoding: ..., content-type: ...}, type: '', links: Object{}, body: null}, status: 404, line: 64578, sourceURL: 'http://localhost:9876/base/tests.webpack.js?9c808e31763ed3efe99b80b148471cef24da90ab', stack: 'stop@http://localhost:9876/base/tests.webpack.js?9c808e31763ed3efe99b80b148471cef24da90ab:64578:29
_callee$@http://localhost:9876/base/tests.webpack.js?9c808e31763ed3efe99b80b148471cef24da90ab:52814:45
tryCatch@http://localhost:9876/base/tests.webpack.js?9c808e31763ed3efe99b80b148471cef24da90ab:64082:44
invoke@http://localhost:9876/base/tests.webpack.js?9c808e31763ed3efe99b80b148471cef24da90ab:64316:30
http://localhost:9876/base/tests.webpack.js?9c808e31763ed3efe99b80b148471cef24da90ab:64134:28
rejected@http://localhost:9876/base/tests.webpack.js?9c808e31763ed3efe99b80b148471cef24da90ab:52781:40
run@http://localhost:9876/base/tests.webpack.js?9c808e31763ed3efe99b80b148471cef24da90ab:62044:29
http://localhost:9876/base/tests.webpack.js?9c808e31763ed3efe99b80b148471cef24da90ab:62057:33
flush@http://localhost:9876/base/tests.webpack.js?9c808e31763ed3efe99b80b148471cef24da90ab:27420:11'}
,PhantomJS 2.1.1 (Mac OS X 0.0.0) WARN: 'JQMIGRATE: jQuery.fn.delegate() is deprecated'
,PhantomJS 2.1.1 (Mac OS X 0.0.0) ERROR: 'Unhandled promise rejection', Error{original: null, response: Response{req: Request{_query: ..., method: ..., url: ..., header: ..., _header: ..., _callbacks: ..., _endCalled: ..., _callback: ..., xhr: ...}, xhr: Object{readyState: ..., timeout: ..., onloadend: ..., withCredentials: ..., onloadstart: ..., status: ..., ontimeout: ..., onabort: ..., upload: ..., onreadystatechange: ..., responseType: ..., response: ..., responseXML: ..., onload: ..., onerror: ..., statusText: ..., onprogress: ..., responseText: ...}, text: 'NOT FOUND', statusText: 'Not Found', statusCode: 404, status: 404, statusType: 4, info: false, ok: false, redirect: false, clientError: true, serverError: false, error: Error{status: ..., method: ..., url: ...}, accepted: false, noContent: false, badRequest: false, unauthorized: false, notAcceptable: false, forbidden: false, notFound: true, headers: Object{connection: ..., date: ..., transfer-encoding: ..., content-type: ...}, header: Object{connection: ..., date: ..., transfer-encoding: ..., content-type: ...}, type: '', links: Object{}, body: null}, status: 404}
,PhantomJS 2.1.1 (Mac OS X 0.0.0) ERROR: 'Unhandled promise rejection', Error{original: null, response: Response{req: Request{_query: ..., method: ..., url: ..., header: ..., _header: ..., _callbacks: ..., _endCalled: ..., _callback: ..., xhr: ...}, xhr: Object{readyState: ..., timeout: ..., onloadend: ..., withCredentials: ..., onloadstart: ..., status: ..., ontimeout: ..., onabort: ..., upload: ..., onreadystatechange: ..., responseType: ..., response: ..., responseXML: ..., onload: ..., onerror: ..., statusText: ..., onprogress: ..., responseText: ...}, text: 'NOT FOUND', statusText: 'Not Found', statusCode: 404, status: 404, statusType: 4, info: false, ok: false, redirect: false, clientError: true, serverError: false, error: Error{status: ..., method: ..., url: ...}, accepted: false, noContent: false, badRequest: false, unauthorized: false, notAcceptable: false, forbidden: false, notFound: true, headers: Object{connection: ..., date: ..., transfer-encoding: ..., content-type: ...}, header: Object{connection: ..., date: ..., transfer-encoding: ..., content-type: ...}, type: '', links: Object{}, body: null}, status: 404}
,PhantomJS 2.1.1 (Mac OS X 0.0.0) ERROR: 'Unhandled promise rejection', Error{original: null, response: Response{req: Request{_query: ..., method: ..., url: ..., header: ..., _header: ..., _callbacks: ..., _endCalled: ..., _callback: ..., xhr: ...}, xhr: Object{readyState: ..., timeout: ..., onloadend: ..., withCredentials: ..., onloadstart: ..., status: ..., ontimeout: ..., onabort: ..., upload: ..., onreadystatechange: ..., responseType: ..., response: ..., responseXML: ..., onload: ..., onerror: ..., statusText: ..., onprogress: ..., responseText: ...}, text: 'NOT FOUND', statusText: 'Not Found', statusCode: 404, status: 404, statusType: 4, info: false, ok: false, redirect: false, clientError: true, serverError: false, error: Error{status: ..., method: ..., url: ...}, accepted: false, noContent: false, badRequest: false, unauthorized: false, notAcceptable: false, forbidden: false, notFound: true, headers: Object{connection: ..., date: ..., transfer-encoding: ..., content-type: ...}, header: Object{connection: ..., date: ..., transfer-encoding: ..., content-type: ...}, type: '', links: Object{}, body: null}, status: 404}
,PhantomJS 2.1.1 (Mac OS X 0.0.0) ERROR: 'Unhandled promise rejection', Error{original: null, response: Response{req: Request{_query: ..., method: ..., url: ..., header: ..., _header: ..., _callbacks: ..., _endCalled: ..., _callback: ..., xhr: ...}, xhr: Object{readyState: ..., timeout: ..., onloadend: ..., withCredentials: ..., onloadstart: ..., status: ..., ontimeout: ..., onabort: ..., upload: ..., onreadystatechange: ..., responseType: ..., response: ..., responseXML: ..., onload: ..., onerror: ..., statusText: ..., onprogress: ..., responseText: ...}, text: 'NOT FOUND', statusText: 'Not Found', statusCode: 404, status: 404, statusType: 4, info: false, ok: false, redirect: false, clientError: true, serverError: false, error: Error{status: ..., method: ..., url: ...}, accepted: false, noContent: false, badRequest: false, unauthorized: false, notAcceptable: false, forbidden: false, notFound: true, headers: Object{connection: ..., date: ..., transfer-encoding: ..., content-type: ...}, header: Object{connection: ..., date: ..., transfer-encoding: ..., content-type: ...}, type: '', links: Object{}, body: null}, status: 404}
,PhantomJS 2.1.1 (Mac OS X 0.0.0) WARN: 'Using default export (`import mobx from 'mobx'`) is deprecated and won’t work in mobx@4.0.0
Use `import * as mobx from 'mobx'` instead'

]]>
  </system-out>
  <system-err/>
</testsuite>